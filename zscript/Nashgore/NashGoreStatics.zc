// Copyright 2006-2019 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// GENERIC STATIC METHODS
//
//===========================================================================

class NashGoreStatics play
{
	//===========================================================================
	//
	//
	//
	//===========================================================================

	static double GetVelocity(Actor self, bool xyOnly = false)
	{
		if (xyOnly)
			return self.Vel.XY.Length();

		return self.Vel.Length();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static bool bIsOnFloor(Actor self)
	{
		return (self.Pos.Z <= self.FloorZ || self.bOnMobj);
	}
	

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void RandomXFlip(Actor self)
	{
		self.bSpriteFlip = RandomPick(false, true);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static double RandomAngle4(void)
	{
		return RandomPick(0, 90, 180, 270);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static bool CheckSky(Actor self)
	{
		if (NashGoreStatics.bIsOnfloor(self) && self.floorpic == skyflatnum)
		{
			return true;
		}
		else if ((self.Pos.Z >= (self.CeilingZ - 4)) && self.ceilingpic == skyflatnum)
		{
			return true;
		}
		return false;
	}

	static bool CheckLiquid(Actor self)
	{
		if (self.GetFloorTerrain().IsLiquid)
		{
			return true;
		}
		else if (self.waterlevel > 0)
		{
			return true;
		}

		return false;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void QueueGore(void)
	{
		let eh = NashGoreHandler(NashGoreHandler.Find("NashGoreHandler"));
		if (eh)
		{
			// get max gore count
			int countmax = eh.maxgore;

			// count current amount of gore objects
			ThinkerIterator it = ThinkerIterator.Create("Actor", STAT_NashGore_Gore);
			Actor mo;
			int count;
			while (mo = Actor(it.Next()))
			{
				count++;
			}

			// clean up excessive gore
			while (count > countmax)
			{
				// destroy the first one it can find
				it.Reinit();
				if (mo = Actor(it.Next()))
				{
					bool valid = (mo is "NashGoreBloodPlane" || mo is "NashGoreGibs" ||
									mo is "NashGoreIceChunk" || mo is "NashGoreSquishyGibs");

					if (valid) mo.Destroy();
					count--;
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void ClearGore(void)
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor", STAT_NashGore_Gore);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			mo.Destroy();
		}
	}
	
	static void ClearCasings()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor", STAT_CASING);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			mo.Destroy();
		}
	}
	
	//backported from nashgore next hehe
	static void ClearDecals()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor", STAT_FLATDECAL);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			mo.Destroy();
		}
		
		// clear wall decals by finding a sprayable line and spamming it with an empty decal :^)
		// this workaround will have to do because of the lack of access to impact decals in ZScript
		for (int l = 0; l < level.Lines.Size(); l++)
		{
			Line ln = level.Lines[l];
			if (ln && !(ln.flags & Line.ML_TWOSIDED))
			{
				Vector2 mid = ln.v1.p + ln.delta * 0.5;
				double ang = atan2(ln.delta.Y, ln.delta.X) + 90.0;
				double dist = -1.0;
				let sprayer = Actor.Spawn("Mapspot", (mid.X, mid.Y, 0.0), NO_REPLACE);
				if (sprayer)
				{
					sprayer.SetOrigin(sprayer.Vec3Offset(cos(ang) * dist, sin(ang) * dist, 0.0), false);
					sprayer.Angle = ang;
					for (int i = 0; i < cl_maxdecals + 1; i++)
					{
						sprayer.A_SprayDecal("NoBlood");
					}
					sprayer.Destroy();
				}

				// no need to search anymore
				break;
			}
		}
	}

	//===========================================================================
	//
	// AlignToPlane
	// Original code written by ZZYZX
	// To do: does not properly retrieve normals from 3D floors yet...
	//
	//===========================================================================
	
	// Returns the center of an Actor accounting for floor clipping.
	// * mo - The Actor to get the center of.
	// * ofs - How much to additionally offset.
	clearscope static double Center(Actor mo, double ofs = 0.0)
	{
		return mo.Height * 0.5 - mo.FloorClip + ofs;
	}
/*
	// Populates line trace data with ceiling or floor hit results without the need to fire off a tracer.
	// * mo - The Actor considered the one doing the trace.
	// * res - The output results. Distance traveled is relative to the center of the Actor.
	// * ceiling - If true, get data on the ceiling instead of the floor.
	static void SetFloorCeilingData(Actor mo, out FLineTraceData res, bool ceiling = false)
	{
		if (ceiling)
		{
			double z;
			sector sec;
			F3DFloor ff;
			[z, sec, ff] = mo.CurSector.NextHighestCeilingAt(mo.Pos.X, mo.Pos.Y, mo.Pos.Z, mo.Pos.Z + mo.Height);

			res.HitSector = sec;
			res.Hit3DFloor = ff;
			res.HitTexture = ff ? ff.model.GetTexture(Sector.floor) : sec.GetTexture(Sector.ceiling);
			res.HitLocation = (mo.Pos.XY, z);
			res.HitDir = (0.0, 0.0, 1.0);
			res.Distance = max(z - (mo.Pos.Z + Center(mo)), 0.0);
			res.NumPortals = 0;
			res.SectorPlane = Sector.ceiling;
			res.HitType = TRACE_HitCeiling;
		}
		else
		{
			double z;
			sector sec;
			F3DFloor ff;
			[z, sec, ff] = mo.CurSector.NextLowestFloorAt(mo.Pos.X, mo.Pos.Y, mo.Pos.Z + MAP_EPSILON);

			res.HitSector = sec;
			res.Hit3DFloor = ff;
			res.HitTexture = ff ? ff.model.GetTexture(Sector.ceiling) : sec.GetTexture(Sector.floor);
			res.HitLocation = (mo.Pos.XY, z);
			res.HitDir = (0.0, 0.0, -1.0);
			res.Distance = max(mo.Pos.Z + Center(mo) - z, 0.0);
			res.NumPortals = 0;
			res.SectorPlane = Sector.floor;
			res.HitType = TRACE_HitFloor;
		}
	}

	// Returns the normal of a given surface. For walls this is based on the direction the trace came from.
	// * res - The data from the fired trace.
	static Vector3 GetSurfaceNormal(FLineTraceData res)
	{
		if (res.HitType != TRACE_HitWall && res.HitType != TRACE_HitFloor && res.HitType != TRACE_HitCeiling)
			return (0.0, 0.0, 0.0);

		Vector3 normal;
		if (res.HitType == TRACE_HitWall)
		{
			if (Level.PointOnLineSide(res.HitLocation.XY - res.HitDir.XY, res.HitLine))
				normal.XY = (res.HitLine.delta.Y, -res.HitLine.delta.X);
			else
				normal.XY = (-res.HitLine.delta.Y, res.HitLine.delta.X);

			return normal.Unit();
		}

		if (res.HitType == TRACE_HitCeiling)
			normal = res.Hit3DFloor ? -res.Hit3DFloor.model.FloorPlane.normal : res.HitSector.CeilingPlane.normal;
		else
			normal = res.Hit3DFloor ? -res.Hit3DFloor.model.CeilingPlane.normal : res.HitSector.FloorPlane.normal;

		return normal;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void AlignToPlane2(Actor self, bool ceiling = false)
	{
		// Note: I leave the 'self' references intact because in my other projects
		// that reuse this method, this is usually a static method.
		// This helps with copy/pasting when doing an update pass on all of them.

		if (!self)
			return;

		FLineTraceData data;
		SetFloorCeilingData(self, data, ceiling);

		Vector3 norm = GetSurfaceNormal(data);
		if (abs(norm.Z) ~== 1.0)
		{
			self.Pitch = norm.Z < 0.0 ? 180.0 : 0.0;
			self.Roll = 0.0;
			return;
		}

		Vector2 angles = NashGoreMath.GetAngles(norm);
		double actorPitch = angles.Y + 90.0;

		double diff = Actor.DeltaAngle(self.Angle, angles.X);
		self.Pitch = actorPitch * cos(diff);
		self.Roll = -actorPitch * sin(diff);
	}
	*/
	
	static void AlignToPlane(Actor self, double pitchAdjust = 0, bool ceiling = false)
	{
		if (!self) return;
		Vector3 norm;
		if (!ceiling)
		{
			norm = self.CurSector.FloorPlane.Normal;
		}
		else
		{
			norm = self.CurSector.CeilingPlane.Normal;
		}
		Vector2 norm_p1 = (norm.X != 0 || norm.Y != 0) ? (norm.X, norm.Y).Unit() : (0, 0);
		Vector2 norm_p2 = ((norm.X, norm.Y).Length(), norm.Z);
		double dang = self.Angle;
		double fang = atan2(norm_p1.Y, norm_p1.X);
		double fpitch = atan2(norm_p2.X, norm_p2.Y);
		double ddiff1 = sin(fang - (dang - pitchAdjust));
		double ddiff2 = cos(fang - dang);
		self.Pitch = (fpitch * ddiff2 - pitchAdjust);
		self.Roll = -fpitch * ddiff1;
		self.Angle = dang;
	}
	
	/*static void FixZFighting(Actor self)
	{
		self.WorldOffset = (0.0, 0.0, frandom[rnd_wofs](0.0, 0.10001));
	}*/
	
	//===========================================================================
	//
	//
	//
	//===========================================================================

	static bool CheckFloating(Actor self, bool ceiling)
	{
		// HAX!!!! If pitch and angle isn't flat, assume that the object is sloped on a plane
		// This check will never work, therefore just skip it entirely
		if (self.Pitch != 0 || self.Roll != 0) return false;

		for (int x = 0; x < self.Radius * 2; x++)
		{
			for (int y = 0; y < self.Radius * 2; y++)
			{
				double zatx = (self.Pos.X - self.Radius) + x;
				double zaty = (self.Pos.Y - self.Radius) + y;

				// the sample points must actually be a different sector
				Sector curSec = self.CurSector;
				Sector testSec = Level.PointInSector((zatx, zaty));

				// part of this actor is found to be floating!
				if (!ceiling)
				{
					if (self.GetZAt(zatx, zaty, flags: GZF_ABSOLUTEPOS) < self.Pos.Z && curSec != testSec)
					{
						return true;
					}
				}
				else
				{
					if (self.GetZAt(zatx, zaty, flags: GZF_ABSOLUTEPOS | GZF_CEILING) > (self.Pos.Z + 2) && curSec != testSec)
					{
						return true;
					}
				}
			}
		}

		return false;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	/*
	static void TraceWallBleed(int damage, Vector3 pos, Actor mo, double angle, double pitch)
	{
		if (!cl_bloodsplats) return;

		if ((mo.bNoBlood) ||
			(mo.bNoBloodDecals) ||
			(mo.bInvulnerable && mo.bDormant) ||
			(mo.player && mo.player.cheats & CF_GODMODE))
		{
			return;
		}

		int count = random(1, 3);
		double noise = frandom(11.25, 45.0);
		String bloodType = "NashGoreWallBloodLarge";

		for (; count; --count)
		{
			FLineTraceData bleedtrace;

			double bleedang = angle + random() * noise;
			double bleedpitch = pitch + random() * noise;
			double cosp = cos(bleedpitch);
			Vector3 vdir = (cosp * cos(bleedang), cosp * sin(bleedang), -sin(bleedpitch));

			double vangle = VectorAngle(vdir.X, vdir.Y);
			double vpitch = -VectorAngle(vdir.Length(), vdir.Z);

			int flags = TRF_THRUACTORS | TRF_THRUBLOCK | TRF_NOSKY;
			if (mo.LineTrace(vangle, 172, vpitch, flags, mo.Height / 2, data: bleedtrace))
			{
				if (bleedtrace.HitType == TRACE_HitWall)
				{
					bool result;
					Actor wallBlood;

					[result, wallBlood] = mo.A_SpawnItemEx(bloodType, flags: SXF_USEBLOODCOLOR);
					if (wallBlood)
					{
						wallBlood.SetOrigin(bleedtrace.HitLocation, false);

						wallBlood.Angle = atan2(bleedtrace.HitLine.delta.Y, bleedtrace.HitLine.delta.X) - 90.;
						if (bleedtrace.LineSide == 1) wallBlood.Angle += 180;

						// move it forward a little to prevent Z fighting
						double fp = frandom(0.05, 0.1);
						wallBlood.SetOrigin
						(
							(
								wallBlood.Pos.X + cos(wallBlood.Angle) * fp,
								wallBlood.Pos.Y + sin(wallBlood.Angle) * fp,
								wallBlood.Pos.Z
							),
							false
						);

						// check floating (do horizontal and vertical separately)
						double xb = wallBlood.Default.Radius * 2;
						for (int i = 0; i < xb; i++)
						{
							// trace behind
							FLineTraceData t2;

							double ang;
							double xoff = -(xb / 2) + i;

							if (bleedTrace.LineSide == 0)
							{
								ang = wallBlood.Angle + 180;
							}
							else if (bleedTrace.LineSide == 1)
							{
								ang = wallBlood.Angle;
							}

							double yb = wallBlood.Default.Height;
							for (int ii = 0; ii < yb; ii++)
							{
								wallBlood.LineTrace(ang, 64, 0, flags, offsetz: wallBlood.Height - ii, offsetside: xoff, data: t2);

								if (t2.HitType == TRACE_HitNone)
								{
									wallBlood.Destroy();
									return;
								}
							}
						}
					}
				}
			}
		}
	}
	*/
}
